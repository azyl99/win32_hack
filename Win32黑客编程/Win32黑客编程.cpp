// Win32黑客编程.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "Win32黑客编程.h"

#define MAX_LOADSTRING 100

// 全局变量: 
HINSTANCE hInst;                                // 当前实例
WCHAR szTitle[MAX_LOADSTRING];                  // 标题栏文本
WCHAR szWindowClass[MAX_LOADSTRING];            // 主窗口类名

// 此代码模块中包含的函数的前向声明: 
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    DialogMain(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: 在此放置代码。

    // 初始化全局字符串
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_WIN32, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // 执行应用程序初始化: 
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WIN32));

    MSG msg;

    // 主消息循环: 
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WIN32));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_WIN32);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释: 
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // 将实例句柄存储在全局变量中

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的:    处理主窗口的消息。
//
//  WM_COMMAND  - 处理应用程序菜单
//  WM_PAINT    - 绘制主窗口
//  WM_DESTROY  - 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static HWND hButton, hwndEdit;
	switch (message)
	{
	case WM_CREATE: //窗口创建产生的消息
		{
			DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG_MAIN), hWnd, DialogMain);
			SendMessage(hWnd, WM_CLOSE, NULL, NULL);// 这样就可以让主窗口是Dialog了，关掉Dialog程序就退出
			
			hwndEdit = CreateWindow(L"edit", NULL,
				WS_CHILD | WS_VISIBLE | WS_BORDER,
				20, 70, 100, 25, hWnd, NULL, NULL, NULL);
			hButton = CreateWindow(L"button", L"确定",
				WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
				350, 70, 80, 25, hWnd, NULL, NULL, NULL);
			return 0;
		}
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // 分析菜单选择: 
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_DIALOG_MAIN), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
			// new add
			RECT rect;

            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: 在此处添加使用 hdc 的任何绘图代码...
			// 取得窗口显示区域的大小
			GetClientRect(hWnd, &rect);
			// 输出字符串, 位置(20,20)
			LPTSTR str = L"Hello world!";
			TextOut(hdc, 20, 20, str, wcslen(str));

            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

INT_PTR CALLBACK DialogMain(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	HWND hWnd = NULL;
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		default:
			break;
		case IDC_BUTTON_OPEN:
			// 第二个参数是控制程序主窗口的显示方式
			// SW_SHOW表示以当前大小激活运行后的程序窗口并显示它。
			WinExec("Notepad.exe", SW_SHOW);
			break;
		case IDC_BUTTON_CLOSE:
			hWnd = FindWindow(L"Notepad", NULL);// 第二个参数是窗口名
			if (hWnd == NULL)
			{
				MessageBox(NULL, L"没有找到记事本", L"错误", MB_DEFAULT_DESKTOP_ONLY);
				return (INT_PTR)FALSE;
			}
			SendMessage(hWnd, WM_CLOSE, NULL, NULL);
			break;
		case IDC_BUTTON_GETTITLE: 
		{
			hWnd = FindWindow(L"Notepad", NULL);
			if (hWnd == NULL)
			{
				MessageBox(NULL, L"没有找到记事本", L"错误", MB_DEFAULT_DESKTOP_ONLY);
				return (INT_PTR)FALSE;
			}
			const int MAX_SIZE = 100;
			TCHAR pCaption[MAX_SIZE] = { 0 };
			SendMessage(hWnd, WM_GETTEXT, (WPARAM)MAXBYTE, (LPARAM)pCaption);
			MessageBox(NULL, pCaption, L"找到标题", MB_DEFAULT_DESKTOP_ONLY);
		
		}	break;
		case IDC_BUTTON_EDITTITLE:
			hWnd = FindWindow(L"Notepad", NULL);
			if (hWnd == NULL)
			{
				MessageBox(NULL, L"没有找到记事本", L"错误", MB_DEFAULT_DESKTOP_ONLY);
				return (INT_PTR)FALSE;
			}
			SendMessage(hWnd, WM_SETTEXT, (WPARAM)0, (LPARAM)L"消息测试");
			break;
		}
		break;
	case WM_CLOSE:
		EndDialog(hDlg, LOWORD(wParam));
		return (INT_PTR)TRUE;
		break;
	}
	return (INT_PTR)FALSE;
}